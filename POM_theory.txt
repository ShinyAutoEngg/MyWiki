1.	What is Object/Elements/POM Repository¬
Its collection of elements locators & business libraries in one place & its developed using POM design pattern 


2.	Why Object repository ? 
              As per the rule of the automation, we should not hardcode[fixed]elements with in test Scripts instead, we should get elements from Object Repository , because in Agile process due to frequent requirement changes , modification & maintenance of   elements is tedious job


3.	What is the advantages repository?  
a.	Reusability of elements, no need to write xpath & other locators again & again
b.	Modification in Repository is easy, when GUI changes frequently
c.	Maintenance is easy, because all the elements we kept in one place
d.	Test Script Code Optimized via business reusable libraries
e.	More Readability
f.	Test Script development is faster due to business lib
g.	Test Script is more robust
h.	Handle Stale Elements Exception.
4.	What is POM?
          POM is a java design pattern preferred by google to develop object repository.  
5.	Why POM ? 
           It’s a well-organized structured design pattern, where we can maintain all the web elements in page wise, due to POM design pattern maintains & modification is easy & faster.
6.	Advantages of POM: 
1.	Well organized structure 
2.	Handle stale element exception.
3.	maintains & modification of element is easy
4.	We can directly store Web Elements in java class
5.	Better fit for Agile processes 
6.	Support Auto healing feature 

7.	Why @FindBy & @Findall annotation instead of driver.findElement(“locator”)
                  Ans : to avoid staleElementReferenceException & also we can use Auto heling feature in @findAll annoation
8.	What is staleElementReferenceException ?
It’s one of selenium Exception , whenever webdriver try to identify an element , element was available in GUI, but at time of performing an action on the elements element was not recognized due to  page got refreshed or elements may become old or element not attached to page in such case we get  staleElementReferenceException

9.	Rules of POM 
Rule 1 : create separte java class for every page in a application & class name should be same page name
Rule 2 : Identify all the elements using @findBy & @findAll , @findbys annotations & store them in speific pom / java class (Element declartion)
Rule3 : For Every POM class  create Constructor to get an Object of the POM class , inside the  Constructor use Pagefactory.initElement()  to initialize the Page Elements  at the time Object creation,  in order to initialize all the page Elements we should use Pagefactory.initElement() (Element initialization)
Rule 4 : declare all the WebElements as private & provide getters methods to accesses elements in testScripts class [this processes is called Encapsulation]
   Note : to create getters mtds inside the java class fallow below steps
              =>place cursor inside the class Right clicksource generate getters & setters  select the getters check box  click on ok button
Rule 5 : Go to every Page & identify the reusable business libraries & implement them in same POM class [Utilization]
There are two ways , we can utilize the POM elements in testScropts
1.	Using getters()                    // single elements access 
2.	Using business libraries    // multiple elements access




10.	Difference between POM & PageFactory design pattern?
             POM is java design pattern, where will maintain all the  Web element locator in well-organized manner
           Pagefactory it’s an extended design pattern of POM , which is used to create an Object to POM classes , & at the time of object creation it will execute all @findBy @findbys annotation then initialize all the elements
  
Difference between @findBy , @findAll &@findBys annotation
 All annotation available in Selenium webdriver, its traditional ways to identify the elements in GUI.
@findBy : used to identify the element using one locator or one condition
@findAll : it contains multiple @findBy annotation , it mean we can identify  the same element using multiple locator (multiple conditions) , it will use OR condition during execution of locator
     @findALL({ @findBy(@id=’username’) , @findBy(name=’user’)})
     Private Webelements userNAmeEdt;
   Note : using above concepts we can achieve Autohealing  technique 
 AutoHealing : during execution , if one locator fails to identify the element , it will retry to identify the same element using another locator 
@FindBys : it contains multiple @findBy annotation , it mean we can identify  the elements using multiple locator (multiple conditions) , it will use AND condition to during execution of locator
        @findBys({ @findBy(@id=’username’) , @findBy(name=’user’)})
     Private Webelements userNAmeEdt;


---------------------------------------------------------------------------------------------------------------------------------------------------------------------

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindAll;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.FindBys;
import org.openqa.selenium.support.PageFactory;

public class LoginPage {

	//initialization
	public LoginPage(WebDriver driver)
	{
		PageFactory.initElements(driver, this);
	}
	
	//Declaration
	@FindBy(name="user_name")
	private WebElement UserTextField;
	
	//@FindBy(name="user_password")
	@FindBys({@FindBy(name="user_password"),@FindBy(xpath="//input[@type=\"password\"]")})
	private WebElement PasswordTextField;
	
	//@FindBy(id="submitButton")
	@FindAll({@FindBy(css="input[type=\"submit\"]"),@FindBy(id="submitButton")})
	private WebElement LoginButton;

	//getter methods
	public WebElement getUserTextField() {
		return UserTextField;
	}

	public WebElement getPasswordTextField() {
		return PasswordTextField;
	}

	public WebElement getLoginButton() {
		return LoginButton;
	}
	/**
	 * This Method is used to login to Application
	 * @param Username
	 * @param Password
	 */

//Business Logics
	public void loginToApplication(String Username,String Password)
	{
		UserTextField.sendKeys(Username);
		PasswordTextField.sendKeys(Password);
		LoginButton.click();
	}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;

import Generic_Utilities.Excel_Utility;
import Generic_Utilities.File_Utility;
import Generic_Utilities.Java_Utility;
import io.github.bonigarcia.wdm.WebDriverManager;
import pomRepository.LoginPage;

public class CreateCampaignTest {

	public static void main(String[] args) throws Throwable {
		
		WebDriverManager.chromedriver().setup();
		WebDriver driver=new ChromeDriver();
		
		driver.manage().window().maximize();
		//driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
		File_Utility flib=new File_Utility();
		String URL = flib.getKeyAndValue("url");
		String USERNAME = flib.getKeyAndValue("username");
		String PASSWORD = flib.getKeyAndValue("password");

		driver.get(URL);
		//HardCoding
	/*	driver.findElement(By.name("user_name")).sendKeys(USERNAME);
		driver.findElement(By.name("user_password")).sendKeys(PASSWORD);
		driver.findElement(By.id("submitButton")).click();*/
		
		//getter methods
	/*	LoginPage login = new LoginPage(driver);
		login.getUserTextField().sendKeys(USERNAME);
		login.getPasswordTextField().sendKeys(PASSWORD);
		login.getLoginButton().click();*/
		
		//BusinessLogics
		LoginPage login = new LoginPage(driver);
		login.loginToApplication(USERNAME, PASSWORD);
		
		
	WebElement moreLink = driver.findElement(By.linkText("More"));
		Actions act = new Actions(driver);
		act.moveToElement(moreLink).perform();
		driver.findElement(By.linkText("Campaigns")).click();
	
		driver.findElement(By.xpath("//img[@alt='Create Campaign...']")).click();
		
		Java_Utility jlib=new Java_Utility();
		int ranNum = jlib.getRandomNum();
		
		Excel_Utility elib=new Excel_Utility();
		String CampaginName = elib.getExcelDataUsingDataFormatter("Campaigns", 0, 0)+ranNum;
		
		driver.findElement(By.name("campaignname")).sendKeys(CampaginName);
	    
		
	    driver.findElement(By.xpath("(//input[@title='Save [Alt+S]'])")).click();
		 Thread.sleep(2000);
		 String Actdata = driver.findElement(By.xpath("//span[@id='dtlview_Campaign Name']")).getText();
		if(Actdata.contains(CampaginName))
		{
			System.out.println("pass");
			
		}
		else
		{
			System.out.println("fail");
		}
		 Thread.sleep(2000);
		
		  driver.findElement(By.xpath("//img[@src='themes/softed/images/user.PNG']")).click();
		  driver.findElement(By.linkText("Sign Out")).click();
	}

	
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

import Generic_Utilities.WebDriver_Utility;

public class HomePage {

	public HomePage(WebDriver driver)
	{
		PageFactory.initElements(driver, this);
	}
	
	@FindBy(linkText="More")
	private WebElement moreLink;
	
	@FindBy(linkText ="Campaigns")
	private WebElement CampaignsLink;

	//organization
	@FindBy(linkText = "Organizations")
	private WebElement organizationLink;
	
	//LOgOut
	@FindBy(xpath="//img[@src='themes/softed/images/user.PNG']")
	private WebElement AdminisatorSign;
	
	@FindBy(linkText = "Sign Out")
	private WebElement signOutLink;
	
	//getterMethods
	public WebElement getOrganizationLink() {
		return organizationLink;
	}

	public WebElement getMoreLink() {
		return moreLink;
	}

	public WebElement getCampaignsLink() {
		return CampaignsLink;
	}
	
	public WebElement getAdminisatorSign() {
		return AdminisatorSign;
	}

	public WebElement getSignOutLink() {
		return signOutLink;
	}

	//Business Logics
	/**
	 * This method is used to click on moreLink
	 */
	public void clickOnMoreLink()
	{
		moreLink.click();
	}
	
	/**
	 * This method is used to click on campaignsLink
	 */
	public void clickOnCampaigns()
	{
		CampaignsLink.click();
	}
	
	/**
	 * This method is used to click on OrganizationLink
	 */
	public void clickOrgnaizationLink()
	{
		organizationLink.click();
	}
	/**
	 * click more link using Action class
	 * @param driver
	 */
	public void clickMoreLink(WebDriver driver)
	{
		WebDriver_Utility wlib=new WebDriver_Utility();
	wlib.ActionsMoveToElement(driver, moreLink);
	CampaignsLink.click();
	}
	
	public void Logout(WebDriver driver)
	{
		WebDriver_Utility wlib=new WebDriver_Utility();
		wlib.ActionsMoveToElement(driver, AdminisatorSign);
		signOutLink.click();
	}
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Random;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.interactions.Actions;

import Generic_Utilities.File_Utility;
import POMRepo.HomePage;
import POMRepo.Login1Page;
import io.github.bonigarcia.wdm.WebDriverManager;

public class CreateOrganization {

	public static void main(String[] args) throws Throwable {
		
		File_Utility flib = new File_Utility();
		WebDriver driver;
		String BROWSER = flib.getKeyAndValue("browser");
	   if(BROWSER.equalsIgnoreCase("CHROME"))
		{
			WebDriverManager.chromedriver().setup();
			 driver=new ChromeDriver();
		}
	else if(BROWSER.equalsIgnoreCase("edge"))
		{
		WebDriverManager.edgedriver().setup();
		 driver=new EdgeDriver();
		}
		else
		{
			driver=new ChromeDriver();
		}
		
	/*	WebDriverManager.chromedriver().setup();
		WebDriver driver=new ChromeDriver();*/
		
		String URL = flib.getKeyAndValue("url");
		String USERNAME = flib.getKeyAndValue("username");
		String PASSWORD = flib.getKeyAndValue("password");
	
		driver.get(URL);
        Thread.sleep(2000);
        Login1Page login = new Login1Page(driver);
    	login.loginToApplication(USERNAME, PASSWORD);
    	
    	//driver.findElement(By.linkText("Organizations")).click();
    	HomePage home = new HomePage(driver);
    	home.clickOrgnaizationLink();
	
	driver.findElement(By.xpath("//img[@alt='Create Organization...']")).click();
	
	Random ran = new Random();
	int ranNum = ran.nextInt(1000);
	
	FileInputStream fis = new FileInputStream("C:\\Users\\Shobha\\Desktop\\AdvSelenium7to9am.xlsx");
	Workbook book = WorkbookFactory.create(fis);
    Sheet sheet = book.getSheet("Organization");
    Row row = sheet.getRow(0);
    Cell cell = row.getCell(0);
    String orgName = cell.getStringCellValue()+ranNum;
	
     driver.findElement(By.name("accountname")).sendKeys(orgName);
	
	driver.findElement(By.id("phone")).sendKeys("468654684");
	driver.findElement(By.id("email1")).sendKeys("abc@gmail.com");
	
	driver.findElement(By.xpath("//input[@title='Save [Alt+S]']")).click();

	Thread.sleep(2000);
//	driver.findElement(By.xpath("//img[@src='themes/softed/images/user.PNG']")).click();
//	driver.findElement(By.xpath("//a[text()='Sign Out']")).click();
	
	/*WebElement ele = driver.findElement(By.xpath("//img[@src='themes/softed/images/user.PNG']"));
	Actions act = new Actions(driver);
	act.moveToElement(ele).click().perform();
	driver.findElement(By.linkText("Sign Out")).click();*/
	home.Logout(driver);
	
	
	}

}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;

import Generic_Utilities.Excel_Utility;
import Generic_Utilities.File_Utility;
import Generic_Utilities.Java_Utility;
import POMRepo.HomePage;
import POMRepo.Login1Page;
import io.github.bonigarcia.wdm.WebDriverManager;

public class CreateCampaignTest {

	public static void main(String[] args) throws Throwable {
		WebDriverManager.chromedriver().setup();
		WebDriver driver=new ChromeDriver();
		File_Utility flib = new File_Utility();
		String URL = flib.getKeyAndValue("url");
		String USERNAME = flib.getKeyAndValue("username");
		String PASSWORD = flib.getKeyAndValue("password");
	
		driver.get(URL);
        Thread.sleep(2000);
        Login1Page login = new Login1Page(driver);
    	login.loginToApplication(USERNAME, PASSWORD);
    	
		
		//BusinessLogics
	//	LoginPAge1 login = new LoginPAge1(driver);
	//	login.loginToApplication(USERNAME, PASSWORD);
		
	/*	WebElement moreLink = driver.findElement(By.linkText("More"));
		Actions act = new Actions(driver);
		act.moveToElement(moreLink).perform();
		driver.findElement(By.linkText("Campaigns")).click();*/
		
		HomePage home = new HomePage(driver);
		home.clickOnMoreLink();
		home.clickOnCampaigns();
		
		driver.findElement(By.xpath("//img[@alt='Create Campaign...']")).click();
		
		Java_Utility jlib=new Java_Utility();
		int ranNum = jlib.getRandomNum();
		
		Excel_Utility elib=new Excel_Utility();
		String CampaginName = elib.getExcelDataUsingDataFormatter("Campaigns", 0, 0)+ranNum;
		
		driver.findElement(By.name("campaignname")).sendKeys(CampaginName);
	    
		
	    driver.findElement(By.xpath("(//input[@title='Save [Alt+S]'])")).click();
		 Thread.sleep(2000);
		 String Actdata = driver.findElement(By.xpath("//span[@id='dtlview_Campaign Name']")).getText();
		if(Actdata.contains(CampaginName))
		{
			System.out.println("pass");
			
		}
		else
		{
			System.out.println("fail");
		}
		 Thread.sleep(2000);
		
		 // driver.findElement(By.xpath("//img[@src='themes/softed/images/user.PNG']")).click();
		 // driver.findElement(By.linkText("Sign Out")).click();
	home.Logout(driver);
	}
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

2.	WebDriver Utility Libraries
 
	WebdriverUtility  is a Generic class , which contains webdriver specific reusable actions like
	waitForPageToLoad()
	waitForElement()
	select()
	accpertAlert()
	cancelAlert()  .Etc

==========Code======================

public class Webdriver_utility {
	
	/**
	 * wait for page to load before indentifying any sychronized element in DOM
	 * 	@author Shobha
	 */
	public void implicitwait(WebDriver driver)
	{
		driver.manage().timeouts().implicitlyWait(20,TimeUnit.SECONDS);
	}
	/**
	 *After every action it will for next action to perform
	 * @author Shobha
	 */
	public void scriptTimeOut(WebDriver driver)
	{
		driver.manage().timeouts().setScriptTimeout(20,TimeUnit.SECONDS);
	}

	/**
	 * used to wait for element to be clickable in GUI and check for specific element for every 500 milliseconds
	 * 
	 */
	public void waitForElementWithCustomTimeOut(WebDriver driver,WebElement Element,int pollingTime)
	{
		FluentWait wait=new FluentWait(driver);
	    wait.pollingEvery(Duration.ofSeconds(20));	
	    wait.until(ExpectedConditions.elementToBeClickable(Element));
	}

	/**
	 * used to switch to any Window based on window title
	 * @param driver
	 * @param PartialWindowTitle
	 * @author Shobha
	 * 
	 */

	public void switchToWindow(WebDriver driver,String PartialWindowTitle)
	{
		  Set<String> allId = driver.getWindowHandles();
	      Iterator<String> it=allId.iterator();
	      while(it.hasNext())
	      {
	      	String wid = it.next();
	      	driver.switchTo().window(wid);
	      	if(driver.getTitle().contains(PartialWindowTitle))
	      	{
	      		break;
	      	}
	}}
	/**
	 *used to switch to AlertWindow and Accept(click on ok Button) 
	 *@param driver
	 *@author Shobha 
	 */
	public void switchToAlertAndAccpect(WebDriver driver)
	{
		driver.switchTo().alert().accept();
	}

	/**
	 * used to switch to AlertWindow and dismiss(click on Cancel Button)
	 *  @param driver
	 * @author Shobha
	 */
	public void switchToAlertAndDismiss(WebDriver driver)
	{
		driver.switchTo().alert().dismiss();
	}
	/**
	 * used to switch to frame window based on Index
	 * @param driver
	 * @param index
	 * @author Shobha
	 */
	public void switchToFrame(WebDriver driver,int index)
	{
		driver.switchTo().frame(index);
		}
	/**
	 * 
	 * used to switch to frame window based on id or name attribute
	 * @param driver
	 * @param id_name_attribute
	 * @author Shobha
	 */
	public void switchToFrame(WebDriver driver,String id_name_Attribute)
	{
	driver.switchTo().frame(id_name_Attribute);	
	}
	/**
	 * used to select the value from the dropDown based on index
	 * @param element
	 * @param index
	 * @author Shobha
	 */
	public void select(WebElement element,int index)
	{
		Select sel=new Select(element);
		sel.selectByIndex(index);
	}
	/**
	 * used to select the value from the dropDown based on text
	* @param element
	 * @param text
	 * @author Shobha
	 */
	public void select(WebElement element, String text)
	{
		Select sel=new Select(element);
		sel.selectByVisibleText(text);
	}

	/**
	 * used to place mouse cursor on specified element
	 * @param driver
	 * @param element
	 * @author Shobha
	 * 
	 */
	public void mouseOverOnElement(WebDriver driver,WebElement element)
	{
		Actions act=new Actions(driver);
		act.moveToElement(element).perform();
		
	}
	/**
	 * used to right click on specific element
	 * @param driver
	 * @param element
	 * @author Shobha
	 */
	public void rightClickOnElement(WebDriver driver,WebElement element)
	{
		Actions act=new Actions(driver);
		act.contextClick(element).perform();
	}
	public void moveByOffest(WebDriver driver,int x,int y)
	{
		Actions act=new Actions(driver);
		act.moveByOffset(x, y).click().perform();
	}
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

public class CampaignPlusSignPage {

	//initialization
	public CampaignPlusSignPage(WebDriver driver)
	{
		PageFactory.initElements(driver, this);
	}
	
	//Declaration
	@FindBy(xpath="//img[@alt='Create Campaign...']")
	private WebElement campaignPlus;

	//getterMethods
	public WebElement getCampaignPlus() {
		return campaignPlus;
	}
	//BusinessLogics
	/**
	 * THis method is used to click on Campaign(+)Sign
	 */
	public void clickCampaignPlus()
	{
		campaignPlus.click();
	}
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

public class CreateCampaignPage {

	public CreateCampaignPage(WebDriver driver)
	{
		PageFactory.initElements(driver, this);
	}
	
	@FindBy(name="campaignname")
	private WebElement createCampaign;

	@FindBy(xpath="//input[@title='Save [Alt+S]']")
	private WebElement saveButton;
	
	public WebElement getCreateCampaign() {
		return createCampaign;
	}
	
	public WebElement getSaveButton() {
		return saveButton;
	}

    public void campaignName(String Name)
	{
		createCampaign.sendKeys(Name);
	}
    
    public void clickOnSaveButton()
    {
    	saveButton.click();
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

public class ValidationPage {

	public ValidationPage(WebDriver driver)
	{
		PageFactory.initElements(driver, this);
	}
	
	@FindBy(xpath="//span[@id='dtlview_Campaign Name']")
     private WebElement validateCampaign;

	public WebElement getValidateCampaign() {
		return validateCampaign;
	}
	
	public String campValidate()
	{
		return validateCampaign.getText();
	}
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Implementation:-

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;

import Generic_Utilities.Excel_Utility;
import Generic_Utilities.File_Utility;
import Generic_Utilities.Java_Utility;
import POMRepo.CampaignPlusSignPage;
import POMRepo.CreateCampaignPage;
import POMRepo.HomePage;
import POMRepo.Login1Page;
import POMRepo.ValidationPage;
import io.github.bonigarcia.wdm.WebDriverManager;

public class CreateCampaignTest {

	public static void main(String[] args) throws Throwable {
		WebDriverManager.chromedriver().setup();
		WebDriver driver=new ChromeDriver();
		
		File_Utility flib = new File_Utility();
		String URL = flib.getKeyAndValue("url");
		String USERNAME = flib.getKeyAndValue("username");
		String PASSWORD = flib.getKeyAndValue("password");
	
		driver.get(URL);
        Thread.sleep(2000);
        Login1Page login = new Login1Page(driver);
    	login.loginToApplication(USERNAME, PASSWORD);
    	
		
		//BusinessLogics
	//	LoginPAge1 login = new LoginPAge1(driver);
	//	login.loginToApplication(USERNAME, PASSWORD);
		
	/*	WebElement moreLink = driver.findElement(By.linkText("More"));
		Actions act = new Actions(driver);
		act.moveToElement(moreLink).perform();
		driver.findElement(By.linkText("Campaigns")).click();*/
		
		HomePage home = new HomePage(driver);
		home.clickOnMoreLink();
		home.clickOnCampaigns();
		
	//	driver.findElement(By.xpath("//img[@alt='Create Campaign...']")).click();
		CampaignPlusSignPage plus = new CampaignPlusSignPage(driver);
		plus.clickCampaignPlus();
		
		Java_Utility jlib=new Java_Utility();
		int ranNum = jlib.getRandomNum();
		
		Excel_Utility elib=new Excel_Utility();
		String CampaginName = elib.getExcelDataUsingDataFormatter("Campaigns", 0, 0)+ranNum;
		
	 //driver.findElement(By.name("campaignname")).sendKeys(CampaginName);
	  //   driver.findElement(By.xpath("(//input[@title='Save [Alt+S]'])")).click();
	    CreateCampaignPage campaign = new CreateCampaignPage(driver);
	    campaign.campaignName(CampaginName);
	    campaign.clickOnSaveButton();
	    
	     
		 Thread.sleep(2000);
		// String Actdata = driver.findElement(By.xpath("//span[@id='dtlview_Campaign Name']")).getText();
		
		ValidationPage campValidate = new ValidationPage(driver);
		String actDAta = campValidate.getValidateCampaign().getText();
		if(actDAta.contains(CampaginName))
		{
			System.out.println("pass");
			
		}
		else
		{
			System.out.println("fail");
		}
		Thread.sleep(2000);
		
		 // driver.findElement(By.xpath("//img[@src='themes/softed/images/user.PNG']")).click();
		 // driver.findElement(By.linkText("Sign Out")).click();
	    home.Logout(driver);
	}
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------Product:

DeleteProduct VAlidation:

import java.util.List;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

public class DeleteProductPage {
       //initalization
		public DeleteProductPage(WebDriver driver)
		{
			PageFactory.initElements(driver, this);
		}
		//Declaration
		@FindBy(xpath="//a[text()='Products']")
		private WebElement navigateProductTable;
		
		@FindBy(xpath="//input[@value='Delete']")
		private WebElement DeleteProduct;

		//gettermethods
		public WebElement getNavigateProductTable() {
			return navigateProductTable;
		}

		public WebElement getDeleteProduct() {
			return DeleteProduct;
		}
		//BusinessLogics
		public void productTable()
		{
			navigateProductTable.click();
		}
		public void deletePrdData( )
		{
			DeleteProduct.click();
		}

		public void validateProduct(WebDriver driver,String productData )
		{
		List<WebElement> productList = driver.findElements(By.xpath("(//table[@class='lvt small']/tbody/tr/td[3])[position()>1]"));

			 boolean flag=false;
			 
			 for(WebElement prdName:productList)
			 {
				String actData = prdName.getText();
				if(actData.contains(productData))//	Markerting293.contains(iphone)
				{
					flag=true;
					break;
				}
			 }
			if(flag)
			{
				System.out.println("product data is deleted");
			}
			else
			{
				System.out.println("product data not deleted");
			}
		}
	}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

import java.util.List;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.annotations.Test;

import Generic_utility.BaseClass;
import Generic_utility.Excel_utility;
import Generic_utility.File_Utility;
import Generic_utility.Java_Utility;
import Generic_utility.WebDriver_Utility;
import OrganizationPom.CreateProductPage;
import OrganizationPom.DeleteProductPage;
import OrganizationPom.HomePage;
import OrganizationPom.LoginPage1;
import io.github.bonigarcia.wdm.WebDriverManager;

public class CreateProductAndDeleteTest extends BaseClass {

	@Test
	public void CreateProductAndDeleteTest() throws Throwable
	{
		File_Utility flib=new File_Utility();
		Excel_utility elib=new Excel_utility();
		Java_Utility jlib=new Java_Utility();
		WebDriver_Utility wlib=new WebDriver_Utility();
		
		//Launching the browser
//		WebDriverManager.chromedriver().setup();
//		WebDriver driver=new ChromeDriver();
		
		//login to application
		String URL = flib.getStringKeyAndValue("url");
		String USERNAME = flib.getStringKeyAndValue("username");
		String PASSWORD = flib.getStringKeyAndValue("password");
driver.get(URL);
wlib.maximizeScreen(driver);

LoginPage1 login=new LoginPage1(driver);
login.loginToApp(USERNAME, PASSWORD);
//driver.findElement(By.name("user_name")).sendKeys(USERNAME);
//driver.findElement(By.name("user_password")).sendKeys(PASSWORD);
//driver.findElement(By.id("submitButton")).click();

//click on product link
HomePage home=new HomePage(driver);
home.productLink();
//driver.findElement(By.linkText("Products")).click();

Thread.sleep(2000);
//click on +sign
CreateProductPage productpage=new CreateProductPage(driver);
productpage.clickonPlusSign();
//driver.findElement(By.xpath("//img[@title='Create Product...']")).click();

//java utility method
int ranNum = jlib.getRandomNum();
String productData = elib.getExcelDataUsingDataFormatter("Product", 0, 0)+ranNum;

productpage.productName(productData);
	//driver.findElement(By.name("productname")).sendKeys(productData);

productpage.saveButton(driver);
	//save the data
//driver.findElement(By.xpath("//input[@title='Save [Alt+S]']")).click();

//product table
DeleteProductPage deletePrd=new DeleteProductPage(driver);
deletePrd.productTable();
//driver.findElement(By.xpath("//a[text()='Products']")).click();
driver.findElement(By.xpath("//table[@class='lvt small']/tbody//td//a[text()='"+productData+"']"
		+ "/../preceding-sibling::td/input")).click();

deletePrd.deletePrdData();
//driver.findElement(By.xpath("//input[@value='Delete']")).click();

wlib.Alertaccept(driver);
//Alert alt = driver.switchTo().alert();
//alt.accept();

//validation
// List<WebElement> productList = driver.findElements(By.xpath("(//table[@class='lvt small']/tbody/tr/td[3])[position()>1]"));
//
// boolean flag=false;
// 
// for(WebElement prdName:productList)
// {
//	String actData = prdName.getText();
//	if(actData.contains(productData))//	Markerting293.contains(iphone)
//	{
//		flag=true;
//		break;
//	}
// }
//if(flag)
//{
//	System.out.println("product data is deleted");
//}
//else
//{
//	System.out.println("product data not deleted");
//}
DeleteProductPage page=new DeleteProductPage(driver);
page.validateProduct(driver, productData);

Thread.sleep(2000);
home.logout(driver);
	}	
	
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Skiluli Implementation:

<!-- https://mvnrepository.com/artifact/com.sikulix/sikulixapi -->
<dependency>
    <groupId>com.sikulix</groupId>
    <artifactId>sikulixapi</artifactId>
    <version>2.0.5</version>
</dependency>

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

import java.awt.Robot;
import java.awt.event.KeyEvent;
import org.sikuli.script.Pattern;
import org.sikuli.script.Screen;

public class SikuliExecution {

	public static void main(String[] args) throws Throwable {
		
		Screen scr = new Screen();
     Pattern pattern = new Pattern("C:\\Users\\Shobha\\Pictures\\Screenshots\\MiniBar.png");
     scr.click(pattern);
     
    Pattern pattern1 = new Pattern("C:\\Users\\Shobha\\Pictures\\Screenshots\\SearchBar.png");
    scr.click(pattern1);
    scr.type("Paint");
	
    Robot robot = new Robot();
    robot.keyPress(KeyEvent.VK_ENTER);
    robot.keyRelease(KeyEvent.VK_ENTER);
    
    Pattern pat = new Pattern("C:\\Users\\Shobha\\Pictures\\Screenshots\\WriteMode.png");
    scr.click(pat);
    
    Pattern patt = new Pattern("C:\\Users\\Shobha\\Pictures\\Screenshots\\PaintPage.png");
	scr.click(patt);
	scr.type("shobha");
	
	
	}

}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------





